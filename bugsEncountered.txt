solve this error for : 
MongoServerError: bad auth : authentication failed
    at Connection.onMessage (D:\My_Programs\VS-Code\Projects\prompt-nation\node_modules\mongoose\node_modules\mongodb\lib\cmap\connection.js:202:26)
    at MessageStream.<anonymous> (D:\My_Programs\VS-Code\Projects\prompt-nation\node_modules\mongoose\node_modules\mongodb\lib\cmap\connection.js:61:60)
    at MessageStream.emit (node:events:514:28)
    at processIncomingData (D:\My_Programs\VS-Code\Projects\prompt-nation\node_modules\mongoose\node_modules\mongodb\lib\cmap\message_stream.js:124:16)
    at MessageStream._write (D:\My_Programs\VS-Code\Projects\prompt-nation\node_modules\mongoose\node_modules\mongodb\lib\cmap\message_stream.js:33:9)
    at writeOrBuffer (node:internal/streams/writable:392:12)
    at _write (node:internal/streams/writable:333:10)
    at Writable.write (node:internal/streams/writable:337:10)
    at TLSSocket.ondata (node:internal/streams/readable:766:22)
    at TLSSocket.emit (node:events:514:28)
    at addChunk (node:internal/streams/readable:324:12)
    at readableAddChunk (node:internal/streams/readable:297:9)
    at Readable.push (node:internal/streams/readable:234:10)
    at TLSWrap.onStreamRead (node:internal/stream_base_commons:190:23)
    at TLSWrap.callbackTrampoline (node:internal/async_hooks:130:17) {
  ok: 0,
  code: 8000,
  codeName: 'AtlasError',
  connectionGeneration: 0,
  [Symbol(errorLabels)]: Set(2) { 'HandshakeError', 'ResetPool' }
}
MongooseError: Operation `users.findOne()` buffering timed out after 10000ms
    at Timeout.<anonymous> (D:\My_Programs\VS-Code\Projects\prompt-nation\node_modules\mongoose\lib\drivers\node-mongodb-native\collection.js:186:23)
    at listOnTimeout (node:internal/timers:569:17)
    at process.processTimers (node:internal/timers:512:7)

for this code : 
import NextAuth from "next-auth/next";
import GoogleProvider from "next-auth/providers/google";
import User from "@models/user";

import { connectToDB } from "@utils/database";
const handler = NextAuth({
    providers:[
        GoogleProvider({
            clientId : process.env.GOOGLE_ID,
            clientSecret: process.env.GOOGLE_CLIENT_SECRET,
        })
    ], 
    callbacks : {
        async  session({session}) {
            const sessionUser  = await User.findOne({
                email: session.user.email
            })
            session.user.id = sessionUser._id.toString()
    
            return session
    
        },
        async signIn({profile}) {
            try {
                await connectToDB()
                const userExists = await User.findOne({email: profile.email})
                if(!userExists)
                {
                    await User.create({
                        email:profile.email,
                        username : profile.name.replace("","").toLowerCase(),
                        image : profile.image
    
                    })
                }
    
            } catch (error) {
                console.log(error)
                return false 
            }
        }  
    }
})


export {handler as GET, handler as POST} ; 
-----------------------------------------------------------------------------------------------------------------------

add comments wherever need in : 
"use client";
import Link from 'next/link'
import Image from 'next/image'
import { useState, useEffect } from 'react'
import { signIn, signOut, useSession, getProviders } from 'next-auth/react'
import React from 'react'

const NavBar = () => {
  const {data : session } = useSession();
  const [providers, setProviders] = useState(null)
  const [toggleDropDown, settoggleDropDown] = useState(false)

  useEffect(() => {
    const setUpProviders = async () => {
      const repsonse = await getProviders()
      setProviders(repsonse)
    }
    setUpProviders()
  }, [])

  return (
    <nav className='flex-between w-full mb-16 pt-3'>
      <Link href="/" className='flex gap-2 flex-center'>
        <Image src="/assets/images/logo.svg" alt='promptNation Logo' width={30} height={30} className='object-contain'>
        </Image>
        <p className='logo_text'>Prompt Nation</p>
      </Link>


      {/* DESKTOP FRIENDLY SECTION  */}
      <div className='sm:flex hidden'>
        {session?.user ? (
          <div className='flex gap-3 md:gap-5'>
            <Link href="/create-prompt" className='black_btn'> Create Post </Link>
            <button type='button' onClick={signOut} className='outline_btn'>Sign Out </button>
            <Link href="/profile">
              <Image src={session?.user.image} width={37} height={37} className='rounded-full' alt='profile' />
            </Link>
          </div>
        ) :
          <>
            {providers &&
              Object.values(providers).map((providers) => (
                <button type='button' key={providers.name} onClick={() => signIn(providers.id)} className='black_btn'>Sign In </button>
              ))}
          </>
        }
      </div>

      {/* MOBILE FRIENDLY SECTION  */}
      <div className='sm:hidden flex relative'>
        {session?.user ? (
          <div className='flex '>
            <Image src="/assets/images/logo.svg" alt='promptNation Logo' width={30} height={30} className='object-contain' onClick={() => settoggleDropDown((prev) => !prev)} />
            {toggleDropDown && (
              <div className='dropdown'>
                <Link href="/profile" className='dropdown_link' onClick={() => settoggleDropDown(false)}> My Profile </Link>
                <Link href="/create-prompt" className='dropdown_link' onClick={() => settoggleDropDown(false)}> Create Prompt </Link>
                <button type='button' onClick={() => { settoggleDropDown(false); signOut() }} className='mt-5w w-full black_btn'>Sign Out </button>
              </div>
            )}
          </div>
        ) : (
          <>
            {providers &&
              Object.values(providers).map((providers) => (
                <button type='button' key={providers.name} onClick={() => signIn(providers.id)} className='black_btn'>Sign In </button>
              ))}
          </>
        )}
      </div>
    </nav>
  )
}

export default NavBar

--------------------------------------------------------------------



solve this error : 
Error: Invalid src prop (https://lh3.googleusercontent.com/a/ACg8ocJAPVawEsY975SLjaCC5j9047o5OcNb5sIdLbQep0fhcd0=s96-c) on `next/image`, hostname "lh3.googleusercontent.com" is not configured under images in your `next.config.js`
See more info: https://nextjs.org/docs/messages/next-image-unconfigured-host

for the following code : "use client";
import Link from 'next/link'
import Image from 'next/image'
import { useState, useEffect } from 'react'
import { signIn, signOut, useSession, getProviders } from 'next-auth/react'
import React from 'react'

const NavBar = () => {
  const {data : session } = useSession();
  const [providers, setProviders] = useState(null)
  const [toggleDropDown, settoggleDropDown] = useState(false)

  useEffect(() => {
    const setUpProviders = async () => {
      const repsonse = await getProviders()
      setProviders(repsonse)
    }
    setUpProviders()
  }, [])

  return (
    <nav className='flex-between w-full mb-16 pt-3'>
      <Link href="/" className='flex gap-2 flex-center'>
        <Image src="/assets/images/logo.svg" alt='promptNation Logo' width={30} height={30} className='object-contain'>
        </Image>
        <p className='logo_text'>Prompt Nation</p>
      </Link>


      {/* DESKTOP FRIENDLY SECTION  */}
      <div className='sm:flex hidden'>
        {session?.user ? (
          <div className='flex gap-3 md:gap-5'>
            <Link href="/create-prompt" className='black_btn'> Create Post </Link>
            <button type='button' onClick={signOut} className='outline_btn'>Sign Out </button>
            <Link href="/profile">
              <Image src={session?.user.image} width={37} height={37} className='rounded-full' alt='profile' />
            </Link>
          </div>
        ) :
          <>
            {providers &&
              Object.values(providers).map((providers) => (
                <button type='button' key={providers.name} onClick={() => signIn(providers.id)} className='black_btn'>Sign In </button>
              ))}
          </>
        }
      </div>

      {/* MOBILE FRIENDLY SECTION  */}
      <div className='sm:hidden flex relative'>
        {session?.user ? (
          <div className='flex '>
            <Image src="/assets/images/logo.svg" alt='promptNation Logo' width={30} height={30} className='object-contain' onClick={() => settoggleDropDown((prev) => !prev)} />
            {toggleDropDown && (
              <div className='dropdown'>
                <Link href="/profile" className='dropdown_link' onClick={() => settoggleDropDown(false)}> My Profile </Link>
                <Link href="/create-prompt" className='dropdown_link' onClick={() => settoggleDropDown(false)}> Create Prompt </Link>
                <button type='button' onClick={() => { settoggleDropDown(false); signOut() }} className='mt-5w w-full black_btn'>Sign Out </button>
              </div>
            )}
          </div>
        ) : (
          <>
            {providers &&
              Object.values(providers).map((providers) => (
                <button type='button' key={providers.name} onClick={() => signIn(providers.id)} className='black_btn'>Sign In </button>
              ))}
          </>
        )}
      </div>
    </nav>
  )
}

export default NavBar
	solve this error :
	Error [OverwriteModelError]: Cannot overwrite `Prompt` model once compiled.
		at Mongoose.model (D:\My_Programs\VS-Code\Projects\prompt-nation\node_modules\mongoose\lib\index.js:563:13)
		at eval (webpack-internal:///(rsc)/./models/prompt.js:28:117)
		at (rsc)/./models/prompt.js (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\app\api\prompt\route.js:62:1)
		at __webpack_require__ (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\webpack-runtime.js:33:43)
		at eval (webpack-internal:///(rsc)/./app/api/prompt/route.js:6:72)
		at (rsc)/./app/api/prompt/route.js (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\app\api\prompt\route.js:52:1)
		at __webpack_require__ (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\webpack-runtime.js:33:43)
		at eval (webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprompt%2Froute&page=%2Fapi%2Fprompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprompt%2Froute.js&appDir=D%3A%5CMy_Programs%5CVS-Code%5CProjects%5Cprompt-nation%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CMy_Programs%5CVS-Code%5CProjects%5Cprompt-nation&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!:16:126)
		at (rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprompt%2Froute&page=%2Fapi%2Fprompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprompt%2Froute.js&appDir=D%3A%5CMy_Programs%5CVS-Code%5CProjects%5Cprompt-nation%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CMy_Programs%5CVS-Code%5CProjects%5Cprompt-nation&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\app\api\prompt\route.js:42:1)
		at __webpack_require__ (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\webpack-runtime.js:33:43)
		at __webpack_exec__ (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\app\api\prompt\route.js:632:39)
		at D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\app\api\prompt\route.js:633:28
		at Object.<anonymous> (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\app\api\prompt\route.js:636:3)
		at Module._compile (node:internal/modules/cjs/loader:1256:14)
		at Module._extensions..js (node:internal/modules/cjs/loader:1310:10)
		at Module.load (node:internal/modules/cjs/loader:1119:32)
		at Module._load (node:internal/modules/cjs/loader:960:12)
		at Module.require (node:internal/modules/cjs/loader:1143:19)
		at require (node:internal/modules/cjs/helpers:110:18)
		at requirePage (D:\My_Programs\VS-Code\Projects\prompt-nation\node_modules\next\dist\server\require.js:112:75)
		at D:\My_Programs\VS-Code\Projects\prompt-nation\node_modules\next\dist\server\load-components.js:80:84
		at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
		at async loadComponentsImpl (D:\My_Programs\VS-Code\Projects\prompt-nation\node_modules\next\dist\server\load-components.js:80:26)
		at async DevServer.findPageComponentsImpl (D:\My_Programs\VS-Code\Projects\prompt-nation\node_modules\next\dist\server\next-server.js:439:36) {
	  digest: undefined
	}

	for this code:

	'use client'
	import React from 'react'

	import { useState } from 'react'
	import { useEffect } from 'react'

	import  PromptCard from './PromptCard'

	const PromptCardList = ({data, handleTagClick}) => { 
	  return(
		<div className='mt-16 prompt_layout'>
			{data.map((post ) => { 
			  <PromptCard key={post._id} post={post} handleTagClick={handleTagClick}/>
			})}
		</div>
	  )
	}
	const Feed = () => {

	  const [searchText, setsearchText] = useState('')
	  const [posts, setposts] = useState([])
	  const handleSearchChange = (e) => {

	  }
	  useEffect(()=>{
		const fetchPosts = async () => { 
		  const reponse  = await fetch('/api/prompt')
		  const data = await reponse.json()

		  setposts(data)
		}
		fetchPosts()

	  },[])
	  return (
		<section className='feed'>
		  <form className='relative w-full flex-center '>
			<input type='text' placeholder='Search for Prompts, Tags, Usernames...' value={searchText} onChange={handleSearchChange} required className='search_input peer'/>
		  </form>
		  <PromptCardList  data={posts} handleTagClick={() => {

		  }}/>
		</section>
	  )
	}

	export default Feed

	---------

	fix any errors from this code :
	'use client'
	import React from 'react'

	import { useState } from 'react'
	import { useEffect } from 'react'

	import  PromptCard from './PromptCard'

	const PromptCardList = ({data, handleTagClick}) => { 
	  return(
		<div className='mt-16 prompt_layout'>
			{data.map((post ) => { 
			  <PromptCard key={post._id} post={post} handleTagClick={handleTagClick}/>
			})}
		</div>
	  )
	}
	const Feed = () => {

	  const [searchText, setsearchText] = useState('')
	  const [posts, setposts] = useState([])
	  const handleSearchChange = (e) => {

	  }
	  useEffect(()=>{
		const fetchPosts = async () => { 
		  const reponse  = await fetch('/api/prompt')
		  const data = await reponse.json()

		  setposts(data)
		}
		fetchPosts()

	  },[])
	  return (
		<section className='feed'>
		  <form className='relative w-full flex-center '>
			<input type='text' placeholder='Search for Prompts, Tags, Usernames...' value={searchText} onChange={handleSearchChange} required className='search_input peer'/>
		  </form>
		  <PromptCardList  data={posts} handleTagClick={() => {

		  }}/>
		</section>
	  )
	}

	export default Feed


	=================

	getting the following error :

	 OverwriteModelError: Cannot overwrite `Prompt` model once compiled.
	 
	 and 
	 
	 error Error [OverwriteModelError]: Cannot overwrite `Prompt` model once compiled.
		at Mongoose.model (D:\My_Programs\VS-Code\Projects\prompt-nation\node_modules\mongoose\lib\index.js:563:13)
		at eval (webpack-internal:///(rsc)/./models/prompt.js:28:117)
		at (rsc)/./models/prompt.js (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\app\api\prompt\route.js:62:1)
		at __webpack_require__ (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\webpack-runtime.js:33:43)
		at eval (webpack-internal:///(rsc)/./app/api/prompt/route.js:5:72)
		at (rsc)/./app/api/prompt/route.js (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\app\api\prompt\route.js:52:1)
		at __webpack_require__ (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\webpack-runtime.js:33:43)
		at eval (webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprompt%2Froute&page=%2Fapi%2Fprompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprompt%2Froute.js&appDir=D%3A%5CMy_Programs%5CVS-Code%5CProjects%5Cprompt-nation%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CMy_Programs%5CVS-Code%5CProjects%5Cprompt-nation&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!:16:126)
		at (rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprompt%2Froute&page=%2Fapi%2Fprompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprompt%2Froute.js&appDir=D%3A%5CMy_Programs%5CVS-Code%5CProjects%5Cprompt-nation%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CMy_Programs%5CVS-Code%5CProjects%5Cprompt-nation&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\app\api\prompt\route.js:42:1)
		at __webpack_require__ (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\webpack-runtime.js:33:43)
		at __webpack_exec__ (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\app\api\prompt\route.js:632:39)
		at D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\app\api\prompt\route.js:633:28
		at Object.<anonymous> (D:\My_Programs\VS-Code\Projects\prompt-nation\.next\server\app\api\prompt\route.js:636:3)
		at Module._compile (node:internal/modules/cjs/loader:1256:14)
		at Module._extensions..js (node:internal/modules/cjs/loader:1310:10)
		at Module.load (node:internal/modules/cjs/loader:1119:32)
		at Module._load (node:internal/modules/cjs/loader:960:12)
		at Module.require (node:internal/modules/cjs/loader:1143:19)
		at require (node:internal/modules/cjs/helpers:110:18)
		at requirePage (D:\My_Programs\VS-Code\Projects\prompt-nation\node_modules\next\dist\server\require.js:112:75)
		at D:\My_Programs\VS-Code\Projects\prompt-nation\node_modules\next\dist\server\load-components.js:80:84
		at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
		at async loadComponentsImpl (D:\My_Programs\VS-Code\Projects\prompt-nation\node_modules\next\dist\server\load-components.js:80:26)
		at async DevServer.findPageComponentsImpl (D:\My_Programs\VS-Code\Projects\prompt-nation\node_modules\next\dist\server\next-server.js:439:36) {
	  digest: undefined
	  
	  for the following code : 
	  
	  import mongoose ,{Schema,models,model} from "mongoose";

	const promptSchema = new Schema({
		creator: {
			type:mongoose.Schema.Types.ObjectId,
			ref:'User',
		},
		prompt : {
			type: String,
			require: [true,'Prompt is Required'],
		},
		tag:{
			type:String,
			required:[true,'Tag is Required']

		}
	})

	const Prompt = model.Prompt || model('Prompt',promptSchema)

	export default Prompt


	this is occuring when i am logged in properly but upon creation of a new post 

	+++++++

	solve the following error :
	TypeError: Cannot read properties of undefined (reading 'image')

	for this code : 

	"use client"

	import React from 'react'
	import {useState} from  'react'
	import Image from 'next/image'
	import { useSession } from 'next-auth/react'

	import { usePathname, useRouter } from 'next/navigation'



	const PromptCard = ({post, handleTagClick, handleEdit,handleDelete }) => {
	  return (
		<div className='prompt_card'>
		  <div className='flex justify-between items-start gap-5'>
			<div>
			  <Image src={post.creator.image} alt='User_Image' width={40} height={40} className='rounded-full object-contain ' />
			</div>
		  </div>
		</div>
	  )
	}

	export default PromptCard

	----------34343434343

	format this : 
	import React from 'react'

	import PromptCard from './PromptCard'


	const Profile = ({name,desc,data,handleEdit,handleDelete}) => {
	  return (
		<section className='w-full'>
		  <h1 className='head_text text-left'>
			<span className='blue_gradient'>{name} Profile</span>
		  </h1>
		  <p className='desc text-left'>{desc}</p>
		  <div className='mt-10 prompt_layout'>
			{data.map((post) => ( 
			  <PromptCard key={post._id} post={post} handleEdit={() => handleEdit && handleEdit(post)} handleDelete={() => handleDelete && handleDelete(post)}/>
			))}
		</div>
		</section>
	  )
	}

	export default Profile

	--------23232233

	resolve this error : 

	Warning: Prop `className` did not match. Server: "null" Client: "head_text text-left"

	in this code :
	 
	 import React from 'react';
	import PromptCard from './PromptCard';

	const Profile = ({ name, desc, data, handleEdit, handleDelete }) => {
	  return (
		<section className='w-full'>
		  <h1 className='head_text text-left'>
			<span className='blue_gradient'>{name} Profile</span>
		  </h1>
		  <p className='desc text-left'>{desc}</p>
		  <div className='mt-10 prompt_layout'>
			{data.map((post) => (
			  <PromptCard
				key={post._id}
				post={post}
				handleEdit={() => handleEdit && handleEdit(post)}
				handleDelete={() => handleDelete && handleDelete(post)}
			  />
			))}
		  </div>
		</section>
	  );
	};

	export default Profile;

jfdjfkdfjdkfjdfkdjkfdfkdfkfjkdfjdkjk 

resolve the following error :
Unhandled Runtime Error
Error: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.

for this code :

"use client"
import React from 'react'
import { useState, useEffect } from 'react'
import { UseSessionOptions, useSession } from 'next-auth/react'
import  {useRouter} from 'next/navigation'

import Profile from '@components/profile'

const MyProfile = () => {
    const {data : session} = useSession() 

    const [posts, setposts] = useState([])
    useEffect(()=>{
        const fetchPosts = async () => { 
        const reponse  = await fetch(`/api/users/${session?.user.id}/posts`)
        const data = await reponse.json()

        const router = useRouter()
    
        setposts(data)
        }
        if(session?.user.id)fetchPosts()

    
    },[])

    const handleEdit = (post) => {
        router.push(`/update-prompt?id=${post._id}`) 

    }

    const handleDelete = async (post) => {

    }
    return (
        <Profile name="My " desc="Welcome to your Personalized Profile Page " data={posts} handleEdit={handleEdit} handleDelete={handleDelete}/>
    )
}

export default MyProfile

--------=-=-=-=-=-=-=

resolve the following error : 

Unhandled Runtime Error
SyntaxError: Unexpected end of JSON input


for this code : 

"use client";

import { useEffect, useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";

import Form from "@components/Form";

const UpdatePrompt = () => {
  const router = useRouter();
  const searchParams = useSearchParams();
  const promptId = searchParams.get("id");

  const [post, setPost] = useState({ prompt: "", tag: "", });
  const [submitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    const getPromptDetails = async () => {
      const response = await fetch(`/api/prompt/${promptId}`);
      const data = await response.json();

      setPost({
        prompt: data.prompt,
        tag: data.tag,
      });
    };

    if (promptId) getPromptDetails();
  }, [promptId]);

  const updatePrompt = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);

    if (!promptId) return alert("Missing PromptId!");

    try {
      const response = await fetch(`/api/prompt/${promptId}`, {
        method: "PATCH",
        body: JSON.stringify({
          prompt: post.prompt,
          tag: post.tag,
        }),
      });

      if (response.ok) {
        router.push("/");
      }
    } catch (error) {
      console.log(error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Form
      type='Edit'
      post={post}
      setPost={setPost}
      submitting={submitting}
      handleSubmit={updatePrompt}
    />
  );
};

export default UpdatePrompt;


00000000000000000000000000000000000

upon trying to click the edit button on a prompt card, the edit page should appear and the fields should be auto populated with the original prompt . But it isnt doing so  for the following code :
'use client'
import React, { useEffect }  from 'react'

import { useState } from 'react'
import { useRouter , useSearchParams } from 'next/navigation'

// import { useSession } from 'next-auth/react' NOT NEEDED ANYMORE 

import Form from '@components/Form'

const UpdatePrompt = () => {
    const router = useRouter()
     // const {data :session} = useSession()   NOT NEEDED ANYMORE 

    const [submitting, setIsSubmitting] = useState(false)
    const [post, setpost] = useState({prompt : '',tag:''})

    const  searchParams = useSearchParams()
    const promptId = searchParams.get('id')

    useEffect(() => {
        const getPromptDetails = async () => {
            const response = await fetch(`/api/prompts/${promptId}`)
            const data =  await response.json()

            setpost({
                prompt : data.prompt,
                tag : data.tag
            })

            if(promptId) getPromptDetails()
        }
    },[promptId])

    const updatePrompt = async (e) => {
        e.preventDefault()
        setIsSubmitting(true)

        if(!promptId) return alert("Prompt ID Not Found !! ")
        
        try {
            const response = await fetch(`/api/prompt/${promptId}`,{
                method:'PATCH',
                body:JSON.stringify({
                    prompt:post.prompt,
                    tag:post.tag
                })
            }) 
            if(response.ok) {
                router.push('/')
            }

        } catch (error) {
            console.log(error)
        }finally
        {
            setIsSubmitting(false)
        }
    }  
    return (
    <Form type="Edit" post={post} setpost={setpost} submitting={submitting} handleSubmit={updatePrompt}/>
)}

export default UpdatePrompt

give any solutions 


1211212122121112121

resolve any issues in the following : 

"use client";

import { useEffect, useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";

import Form from "@components/Form";

const UpdatePrompt = () => {
  const router = useRouter();
  const searchParams = useSearchParams();
  const promptId = searchParams.get("id");

  const [post, setPost] = useState({ prompt: "", tag: "", });
  const [submitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    const getPromptDetails = async () => {
      const response = await fetch(`/api/prompt/${promptId}`);
      const data = await response.json();

      setPost({
        prompt: data.prompt,
        tag: data.tag,
      });
    };

    if (promptId) getPromptDetails();
  }, [promptId]);

  const updatePrompt = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);

    if (!promptId) return alert("Missing PromptId!");

    try {
      const response = await fetch(`/api/prompt/${promptId}`, {
        method: "PATCH",
        body: JSON.stringify({
          prompt: post.prompt,
          tag: post.tag,
        }),
      });

      if (response.ok) {
        router.push("/");
      }
    } catch (error) {
      console.log(error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Form
      type='Edit'
      post={post}
      setPost={setPost}
      submitting={submitting}
      handleSubmit={updatePrompt}
    />
  );
};

export default UpdatePrompt;


-=-=-=-=-=-=-=-=-=

are these api endopints fine  :
import Prompt from "@models/prompt";
import { connectToDB } from "@utils/database";
import { Response } from "next/dist/client/components/redirect";

// GET Endpoint for Retrieving the Prompts from the User Profile 
export const GET = async (request, { params }) => {
    try {
        await connectToDB();

        // Find the prompt by its ID and populate the creator field
        const prompt = await Prompt.findById(params.id).populate('creator');
        if (!prompt) return new Response("OOP's Prompt Not Found", { status: 404 });

        // Return the prompt data as JSON with a 200 status code
        return new Response(JSON.stringify(prompt), { status: 200 });
    } catch (error) {
        // Return an error response with a 500 status code if there's an issue
        return new Response("Failed to fetch the prompt", { status: 500 });
    }
}

// PATCH Endpoint for Updating/Editing the Prompt
export const PATCH = async (request, { params }) => {
    const { prompt, tag } = await request.json();

    try {
        await connectToDB();
        const existingPrompt = await Prompt.findById(params.id);

        if (!existingPrompt) return new Response("Sorry, Prompt Not Found", { status: 404 });

        // Update the prompt with new data
        existingPrompt.prompt = prompt;
        existingPrompt.tag = tag;

        await existingPrompt.save();

        // Return the updated prompt data as JSON with a 200 status code
        return new Response(JSON.stringify(existingPrompt), { status: 200 });
    } catch (error) {
        // Return an error response with a 500 status code if there's an issue
        return new Response("Failed to update the prompt", { status: 500 });
    }
}

// DELETE Endpoint for Deleting the Prompt Card 
export const DELETE = async (request, { params }) => {
    try {
        await connectToDB();
        
        // Find and remove the prompt by its ID
        await Prompt.findByIdAndRemove(params.id);

        // Return a success message with a 200 status code
        return new Response("Prompt Deleted Successfully", { status: 200 });
    } catch (error) {
        // Return an error response with a 500 status code if there's an issue
        return new Response("OOP's Failed to Delete Prompt", { status: 500 });
    }
}
------------------454954854958495489549849

	getting this error: 

	page.jsx:44     PATCH http://localhost:3000/api/prompt/undefined net::ERR_ABORTED 500 (Internal Server Error)
	updatePrompt @ page.jsx:44
	callCallback @ react-dom.development.js:19443
	invokeGuardedCallbackImpl @ react-dom.development.js:19492
	invokeGuardedCallback @ react-dom.development.js:19567
	invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:19581
	executeDispatch @ react-dom.development.js:30621
	processDispatchQueueItemsInOrder @ react-dom.development.js:30653
	processDispatchQueue @ react-dom.development.js:30666
	dispatchEventsForPlugins @ react-dom.development.js:30677
	eval @ react-dom.development.js:30867
	batchedUpdates$1 @ react-dom.development.js:23747
	batchedUpdates @ react-dom.development.js:27583
	dispatchEventForPluginEventSystem @ react-dom.development.js:30866
	dispatchEvent @ react-dom.development.js:28639
	dispatchDiscreteEvent @ react-dom.development.js:28610

	for this code : 

	'use client'
	import React, { useEffect }  from 'react'

	import { useState } from 'react'
	import { useRouter , useSearchParams } from 'next/navigation'

	// import { useSession } from 'next-auth/react' NOT NEEDED ANYMORE 

	import Form from '@components/Form'

	const UpdatePrompt = () => {
		const router = useRouter()
		 // const {data :session} = useSession()   NOT NEEDED ANYMORE 

		const [submitting, setIsSubmitting] = useState(false)
		const [post, setpost] = useState({prompt :"",tag:""})

		const  searchParams = useSearchParams()
		const promptId = searchParams.get("id")

		useEffect(() => 
		{
			const getPromptDetails = async () => 
			{
				const response = await fetch(`/api/prompts/${promptId}`)
				const data =  await response.json()

				setpost({
					prompt : data.prompt,
					tag : data.tag
				})

				if(promptId) getPromptDetails()
			}
		},[promptId])

		const updatePrompt = async (e) => {
			e.preventDefault()
			setIsSubmitting(true)

			if(!promptId) return alert("Prompt ID Not Found !! ")
			
			try {
				const response = await fetch(`/api/prompt/${promptId}`,{
					method:'PATCH',
					body:JSON.stringify({
						prompt:post.prompt,
						tag:post.tag
					})
				}) 
				if(response.ok) {
					router.push('/')
				}

			} catch (error) {
				console.log(error)
			}finally
			{
				setIsSubmitting(false)
			}
		}  
		return (
		<Form type='Edit' post={post} setpost={setpost} submitting={submitting} handleSubmit={updatePrompt}/>
	)}

	export default UpdatePrompt


	it is using this api endopint : 

	export const PATCH = async (request, { params }) => {
		const { prompt, tag } = await request.json();

		try {
			await connectToDB();
			const existingPrompt = await Prompt.findById(params._id);

			if (!existingPrompt) {
				return new Response("Prompt Not Found", { status: 404 });
			}

			// Validate and update the prompt with new data
			if (prompt) {
				existingPrompt.prompt = prompt;
			}
			if (tag) {
				existingPrompt.tag = tag;
			}

			const updatedPrompt = await existingPrompt.save();

			return new Response(JSON.stringify(updatedPrompt), { status: 200 });
		} catch (error) {
			console.error(error);
			return new Response("Failed to update the prompt", { status: 500 });
		}
	}


45549585948594895485459485 

the api url - http://localhost:3000/api/prompt/65082f1d29607de3a854b00a is a sample propmt id from the db which is working perfectly upon hitting.
Yet for this code the api is unable to fetch the prompt id and update the prompt hence giving - PATCH http://localhost:3000/api/prompt/undefined net::ERR_ABORTED 500 (Internal Server Error)

This is the code : 

'use client'
import React, { useEffect }  from 'react'

import { useState } from 'react'
import { useRouter , useSearchParams } from 'next/navigation'

// import { useSession } from 'next-auth/react' NOT NEEDED ANYMORE 

import Form from '@components/Form'

const UpdatePrompt = () => {
    const router = useRouter()
     // const {data :session} = useSession()   NOT NEEDED ANYMORE 

    const [submitting, setIsSubmitting] = useState(false)
    const [post, setpost] = useState({prompt :"",tag:""})

    const  searchParams = useSearchParams()
    const promptId = searchParams.get("id")

    useEffect(() => 
    {
        const getPromptDetails = async () => 
        {
            const response = await fetch(`/api/prompts/${promptId}`)
            const data =  await response.json()

            setpost({
                prompt : data.prompt,
                tag : data.tag
            })

            if(promptId) getPromptDetails()
        }
    },[promptId])

    const updatePrompt = async (e) => {
        e.preventDefault()
        setIsSubmitting(true)

        if(!promptId) return alert("Prompt ID Not Found !! ")
        
        try {
            const response = await fetch(`/api/prompt/${promptId}`,{
                method:'PATCH',
                body:JSON.stringify({
                    prompt:post.prompt,
                    tag:post.tag
                })
            }) 
            if(response.ok) {
                router.push('/')
            }

        } catch (error) {
            console.log(error)
        }finally
        {
            setIsSubmitting(false)
        }
    }  
    return (
    <Form type='Edit' post={post} setpost={setpost} submitting={submitting} handleSubmit={updatePrompt}/>
)}

export default UpdatePrompt

and this is the record from the db 

{
"_id": "65082f1d29607de3a854b00a",
"creator": {
"_id": "650579c9b4356c64ba62e40a",
"email": "abhiram.suradkar@gmail.com",
"username": "abhiramsuradkar",
"image": "https://lh3.googleusercontent.com/a/ACg8ocJAPVawEsY975SLjaCC5j9047o5OcNb5sIdLbQep0fhcd0=s96-c",
"__v": 0
},
"prompt": "write me a poem for the soldiers of ww2",
"tag": "#poetry ",
"__v": 0
}

34347364736746374367643

how can i test what is the response of this - const promptId = searchParams.get("id")